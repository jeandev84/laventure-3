<?php
namespace App\Http\Controllers\Admin;


use App\ORM\Mapper\Entity\User;
use App\ORM\Mapper\Repository\UserRepository;
use Laventure\Component\Database\ORM\Mapper\Manager\EntityManager;
use Laventure\Component\Http\Request\Request;
use Laventure\Component\Http\Response\Response;
use Laventure\Foundation\Http\Controllers\Controller;


/**
 * @class UserController
 *
 * @package App\Http\Controllers\Admin
 *
 * <Generated By Laventure 09/11/2022 02:23:50>
*/
class UserController extends Controller
{

        /**
         * @var EntityManager
        */
        private $em;




        /**
         * @var UserRepository
        */
        private $repository;





        /**
         * UserController constructor.
         *
         * @param EntityManager $em
         * @param UserRepository $repository
        */
        public function __construct(EntityManager $em, UserRepository $repository)
        {
              $this->em = $em;
              $this->repository = $repository;
        }





        /**
         * @param Request $request
         * @return Response
        */
        public function index(Request $request): Response
        {
             /* $users = $this->em->getRepository(User::class)->findAll(); */

             $users = $this->repository->findAll();

             return view('admin.user.index', compact('users'));
        }






        /**
         * @param $id
         * @return Response
        */
        public function show($id): Response
        {
             $user = $this->repository->findOneBy(['id' => $id]);

             if (! $user instanceof User) {
                  return \redirect(\route('admin.user.index'));
             }

             return view('admin.user.show', compact('user'));
        }





        /**
         * @return Response
        */
        public function create(): Response
        {
              return view('admin.user.create');
        }




        /**
         * @param Request $request
         * @return Response
        */
        public function store(Request $request): Response
        {
              //dd($request->request->all());
              $password = $request->request->get('password');
              $enabled  = (bool) $request->request->get('active');

              $user = new User();
              $user->setUsername($request->request->get('username'))
                   ->setPassword(password_hash($password, PASSWORD_DEFAULT))
                   ->setActive($enabled);


              $this->em->persist($user);

              $this->em->flush();

              $id = $this->em->lastId();

              return redirect(route('admin.user.update', ['id' => $id]));
        }






        public function edit($id)
        {
            $user = $this->repository->findOneBy(['id' => $id]);

            if (! $user instanceof User) {
                return \redirect(\route('admin.user.index'));
            }

            return view('admin.user.edit', compact('user'));
        }





        /**
         * @param Request $request
         * @param $id
         * @return Response
        */
        public function update(Request $request, $id): Response
        {
              $user = $this->repository->findOneBy(['id' => $id]);

              if (! $user instanceof User) {
                   return \redirect(\route('admin.user.index'));
              }


              $user->setUsername($request->request->get('username'));

              $this->em->flush();

              return redirect(route('admin.user.edit', ['id' => $id]));
        }





        /**
         * @param $id
         * @return Response
        */
        public function destroy($id): Response
        {
              return \response(null, Response::HTTP_OK);
        }





        public function demo()
        {
             dd('Demo');
        }
}